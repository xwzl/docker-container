input {
#  http {port => 8000}
  file {
    path => "/root/config/logstash-7.5.2/apache.log"
    # 文件作为输入源，有一个坏处，日志文件必须删除重建，因为logstash 文件读取的原因
    start_position => "beginning"
  }
}

filter {

  mutate{ add_field => {"[@metadata][debug]" => true}}
  grok {
    # match => { "message" => "%{COMBINEDAPACHELOG}" }
    # '' 中 " 不用转义
    match => {
      # timestamp 值存在 @metadata 中，由于 @metadata 的值不显示，因此后面不用删除 timestamp 字段
      "message" => '%{IPORHOST:clientip} %{USER:ident} %{USER:auth} \[%{HTTPDATE:[@metadata][timestamp]}\] "(?:%{WORD:verb} %{NOTSPACE:request}(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})" %{NUMBER:response} (?:%{NUMBER:bytes}|-) %{QS:referrer} %{QS:agent}'
    }
  }

  # 类似 copy 的写法
  ruby  {
    code => "event.set('@ruby_timestamp',event.get('@timestamp'))"
  }

  # 13/Mar/2016:02:38:26 +0000 格式化日期, timestamp 的值赋值给 timestamp
  # 如果没有指定，则 @timestamp 默认为当前时间
  date {
    match => ["[@metadata][timestamp]","dd/MMM/yyyy:HH:mm:ss Z"]
    # timestamp 字段多余，祛除冗余字段，由于 timestamp 放在了 @metadata 中，因此不用删除
    # remove_field => ["timestamp"]
  }

  # 类型处理
  mutate {
    convert => {"bytes" => "integer"}
  }

  # 获取 ip 信息
  geoip {
    source => "clientip"
    # 显示字段
    fields => ["country_name","city_name","region_name"]
  }

  # 根据 BrowserScope 数据将用户代理字符串解析为结构化数据
  # UserAgent过滤器，添加有关用户代理的信息，例如家族，操作系统，版本和设备
  useragent {
    source => "agent"
    # agent 重名为 useragent
    target => "useragent"
  }

  mutate {
    # 复制字段,6.1.1版本报错
    copy => {
      "@timestamp" => "@read_timestamp"
    }
    remove_field => ["headers"]
  }

  # 处理错误数据字段
  mutate {
    add_field => {
      "[@metadata][index]" => "apache_logs_%{+YYYY.MM}"
    }
  }

  # 处理错误数据思路
  if "_grokparsefailure"  in [tags] {
    mutate {
      # 替换
      replace => {
        "[@metadata][index]" => "apache_logs_failure_%{+YYYY.MM}"
      }
    }
  } else {
    mutate {
      # 日志解析正确在删除 message
      remove_field => ["message"]
    }
  }
}

output {

  if [@metadata][debug] {
   stdout {codec => rubydebug{metadata => true}}
  } else {
    stdout{ codec => dots}
  }
  elasticsearch {
       hosts => ["http://127.0.0.1:9200"]
        index => "%{[@metadata][index]}"
  }
}
